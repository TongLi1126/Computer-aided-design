function [dmax,population,it] = myGA(V,M,lb,ub,bm)
	% myGA(f,V,M,lb,ub)
	% f : function to minimize
	% V : Dimension of the search space.
	% M : Number of objectives.
	% lb = lower bound vector.
	% ub = upper bound vector. 

	%% DEFINITION OF THE PARAMETERS

	N = 100;    % Population size
	NP = 50;    % Size of the mating pool
	%NC = 40;    % Number of children generated by generation
	% P = 0.5;     % probability of recombination
    mu = 20;  % 交叉和变异算法的分布指数
    mum = 20;
	verbose = true; % (true) plots each iteration
    L = 40;     %length of time window
    sigma = 0.02;  % stop criterion


V = 6;  
M = 2;
bm = 4;
lb = 0*ones(1,V); 
ub = 1*ones(1,V); 


	%% GENETIC ALGORITHM

	% Generation of the intial population,already contain V+M columns
	population = initPopulation(N,M,V,lb,ub,bm);

	% population = evaluatePopulation(population,f,N,V,M,lb,ub);

	population = sortPopulation(population,V,M);

	% Main loop
	it = 1;
    dmax = [];
	runFlag = true;
	while runFlag

		parents = selectionTournament(population,NP,V,M);	

		offspring = geneticOperators(parents,N,V,M,mu,mum,lb,ub,bm);

        
         clear temp
         
        % combine unselected parents & children
		population = [ population(:,1:V+M) ; offspring(:,1:V+M) ];
        % sort by rank and distance,add 2 columns 
		population_sort = sortPopulation(population,V,M);

		population = cropPopulation(population_sort,N,M,V);

		% Visualization
		if verbose
			illustratePopulation(population,V,M,lb,ub,it);
			drawnow;
			pause(0.1);
        end
        population_cd = population(:,V+M+2); 
        population_cd(find(isinf(population_cd)==1)) = 0;       
        dmax = [dmax max(population_cd)];
        
		it = it+1;

		runFlag = stopCriterion(it,dmax,L,sigma);
	end
	
end
